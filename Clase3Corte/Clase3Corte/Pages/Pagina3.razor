@page "/Pagina3"
@inject HttpClient client;
@using System.Net.Http.Json
@using Clase3Corte.Data
<PageTitle>Videojuegos</PageTitle>
<br />
<MudButton OnClick = "(args) => AgregarNuevoRegistro()" Variant="Variant.Filled" Color="Color.Error">Añadir</MudButton>
   

<MudDataGrid T="Videojuego" Items="@Videojuegos" ReadOnly="@_readOnly" EditMode="@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)"
    StartedEditingItem="@StartedEditingItem" CancelledEditingItem="@CancelledEditingItem" CommittedItemChanges="@CommittedItemChanges"
    Bordered="true" Dense="true" EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)">
    <Columns>
        <Column T="Videojuego" Field="IdJuego" Title="Id" IsEditable="false" />
        <Column T="Videojuego" Field="Titulo" Title="Titulo" />
        <Column T="Videojuego" Field="Consola" Title="Consola" />
        <Column T="Videojuego" Field="Desarrollador" Title="Desarrollador"/>
        <Column T="Videojuego" Field="Categoria" Title="Categoria" />
        <Column T="Videojuego" Field="Descripcion" Title="Descripcion" />
        <Column T="Videojuego" Hidden="@(_isCellEditMode || _readOnly || _editTriggerRowClick)" CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Edit" OnClick="@context.Actions.StartEditingItem" />
                 <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Delete" OnClick="(args)=>EliminarEvento(context.Item)" />
            </CellTemplate>
        </Column>
    </Columns>
</MudDataGrid>



@code {
    private IEnumerable<Videojuego> Videojuegos = new List<Videojuego>();
    private bool _readOnly;
    private bool _isCellEditMode;
    private List<string> _events = new();
    private bool _editTriggerRowClick;

    protected override async Task OnInitializedAsync()
    {
        var elemento = new List<Videojuego>();
        client.BaseAddress = new Uri("https://localhost:7174/");
        var RequestMessage = new HttpRequestMessage(HttpMethod.Get, "Biblioteca/ConsultarVideojuegos");
        var respuesta = await client.SendAsync(RequestMessage);

        Videojuegos = elemento;
    }



    async void EliminarEvento(Videojuego elemento)
    {
        var i = elemento.IdJuego;
        ((List<Videojuego>)Videojuegos).Remove(elemento);
        //client.BaseAddress = new Uri("https://localhost:7174/");
        var requestMessage = new HttpRequestMessage(HttpMethod.Delete, "Biblioteca/BorrarVideojuegos?ID="+i+"");
        var respuesta = await client.SendAsync(requestMessage);
        StateHasChanged();
    }


    async Task AgregarNuevoRegistro()
    {

        var elemento = new Videojuego
            {
                IdJuego = 0000,
                Titulo = "Titulo",
                Consola = "Consola",
                Desarrollador = "Desarrollador",
                Categoria = "Categoria",
                Descripcion = "Descripcion",
            };
        ((List<Videojuego>)Videojuegos).Add(elemento);
        //client.BaseAddress = Uri("https:localhost:7174/");
        var requestMessage = new HttpRequestMessage(HttpMethod.Post, "Biblioteca/AgregarVideojuegos?IdJuego=0000&Titulo=Titulo&Consola=Consola&Desarrollador=Desarrollador&Categoria=Categoria&Descripcion=Descripcion");
        var respuesta = await client.SendAsync(requestMessage);
        if (respuesta.StatusCode == System.Net.HttpStatusCode.OK)
        {

        }
        StateHasChanged();

    }

    // events
    void StartedEditingItem(Videojuego item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CancelledEditingItem(Videojuego item)
    {
        _events.Insert(0, $"Event = CancelledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }
    //este servirá para guardar o actualizar registros
    void CommittedItemChanges(Videojuego item)
    {
        var id = item.IdJuego;
        var titu = item.Titulo;
        var cons = item.Consola;
        var des = item.Desarrollador;
        var cat = item.Categoria;
        var desc = item.Descripcion;
        var requestMessage = new HttpRequestMessage(HttpMethod.Put, "Biblioteca/ActualizarVideojuegos?ID="+id+"&Titulo="+titu+"&Consola="+cons+"&Desarrollador="+des+"&Categoria="+cat+"&Descripcion="+desc);
       
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    
    StateHasChanged();
}
}